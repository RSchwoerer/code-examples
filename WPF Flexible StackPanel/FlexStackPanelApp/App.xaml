<!--
﻿// Copyright (c) 2013 xmetropol.
// This code is distributed under the Microsoft Public License (Ms-PL).
// All rights reserved.
-->
<Application x:Class="FlexStackPanelApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
             xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
             xmlns:xmp="clr-namespace:xMetropol.UI.Panels" 
             xmlns:xamlExtensions="clr-namespace:xMetropol.Util.XamlExtensions"
             xmlns:xme="clr-namespace:xMetropol.UI.Extensions" xmlns:a="clr-namespace:FlexStackPanelApp"
             StartupUri="MainWindow.xaml">
  <Application.Resources>

    <SolidColorBrush x:Key="CheckedBorder" Color="#ffe5c365" />

    <LinearGradientBrush x:Key="GoldGlassBrush" StartPoint="0,0" EndPoint="0,1">
      <GradientStop Color="#FFfffcf2" Offset="0" />
      <GradientStop Color="#FFfff4d1" Offset="0.5" />
      <GradientStop Color="#FFffedba" Offset="0.51" />
      <GradientStop Color="#FFffe8a6" Offset="0.52" />
      <GradientStop Color="#FFffe8a6" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ContextMenuBackground" StartPoint="0,0" EndPoint="0,1">
      <GradientStop Color="#ffe9ecee" Offset="0" />
      <GradientStop Color="#ffd0d7e2" Offset="1" />
    </LinearGradientBrush>

    <Geometry x:Key="MenuIconGeometry">M 0 0 L 8 0 L 4 4 Z</Geometry>
    <Geometry x:Key="OverflowMenuIconGeometry">M 0 0 H 8 V 2 H 0 V 0 Z M 0 4 L 8 4 L 4 8 Z</Geometry>
    <Geometry x:Key="CloseIconGeometry">M 0 0 L 8 8 M 0 8 L 8 0</Geometry>

    <Style x:Key="CaptionStyle" TargetType="TextBlock">
      <Setter Property="FontSize" Value="12" />
      <Setter Property="Margin" Value="2,0,2,0" />
      <Setter Property="TextTrimming" Value="CharacterEllipsis" />
      <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
      <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
    </Style>

    <!-- TabItem CloseButton style -->
    <Style x:Key="CloseButtonStyle" TargetType="Button">
      <Setter Property="Foreground" Value="LightGray" />
      <Setter Property="Width" Value="16" />
      <Setter Property="Height" Value="16" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Button">
            <Border Background="Transparent"
                  Name="ButtonBorder"
                  BorderThickness="1"
                  BorderBrush="Transparent">
              <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Background" TargetName="ButtonBorder" Value="LightCyan" />
                <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Gold" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="SubmenuItemTemplateKey" TargetType="MenuItem">
      <Border Name="Border"
            Background="Transparent"
            BorderThickness="1"
            BorderBrush="Transparent"
            CornerRadius="3"
            Margin="2,0,2,0">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="24" />
            <ColumnDefinition Width="*" SharedSizeGroup="Content" />
            <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
          </Grid.ColumnDefinitions>

          <Image Grid.Column="0"  
               x:Name="MenuIcon"
               Width="20"
               Height="20"
               Stretch="None"
               Source="{TemplateBinding Icon}"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"/>

          <ContentPresenter Grid.Column="1"  ContentSource="Header" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <ContentPresenter.Resources>
              <Style TargetType="TextBlock">
                <Setter Property="FontSize" Value="12" />
                <Setter Property="Margin" Value="2,0,2,0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
                <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
                <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=MenuItem}}" />
              </Style>
            </ContentPresenter.Resources>
          </ContentPresenter>
        </Grid>
      </Border>
      <ControlTemplate.Triggers>
        <Trigger Property="IsHighlighted" Value="True">
          <Setter Property="Background" TargetName="Border" Value="{StaticResource GoldGlassBrush}" />
          <Setter Property="BorderBrush" TargetName="Border" Value="{StaticResource CheckedBorder}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Foreground" Value="Gray" />
        </Trigger>
        <Trigger Property="Icon" Value="{x:Null}">
          <Setter TargetName="MenuIcon"  Property="Visibility" Value="Hidden" />
        </Trigger>
      </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="MenuItemBase" TargetType="MenuItem">
      <Setter Property="OverridesDefaultStyle" Value="True" />
      <Style.Triggers>
        <Trigger Property="Role" Value="SubmenuItem">
          <Setter Property="Template" Value="{StaticResource SubmenuItemTemplateKey}" />
          <Setter Property="MinWidth" Value="180" />
          <Setter Property="Height" Value="24" />
        </Trigger>
      </Style.Triggers>
    </Style>

    <!-- Context Menu Style -->
    <Style x:Key="ContextMenuBase"  TargetType="ContextMenu">
      <Setter Property="Panel.Background" Value="{StaticResource ContextMenuBackground}" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate  TargetType="ContextMenu">
            <mwt:SystemDropShadowChrome Color="#00FFFFFF" Name="Shdw" SnapsToDevicePixels="True">
              <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" Name="ContextMenuBorder">
                <ScrollViewer Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=FrameworkElement, ResourceId=MenuScrollViewer}}" Name="ContextMenuScrollViewer">
                  <Grid RenderOptions.ClearTypeHint="Enabled">
                    <Rectangle HorizontalAlignment="Left" Width="24" Fill="#ffe9ecee" />
                    <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" />
                  </Grid>
                </ScrollViewer>
              </Border>
            </mwt:SystemDropShadowChrome>
            <ControlTemplate.Triggers>
              <Trigger Property="ContextMenuService.HasDropShadow" Value="True">
                <Setter Property="FrameworkElement.Margin" TargetName="Shdw" Value="0,0,5,5" />
                <Setter Property="mwt:SystemDropShadowChrome.Color" TargetName="Shdw" Value="#71000000" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <!-- Base TabItem style -->
    <Style x:Key="TabItemBase" TargetType="TabItem">
      <Style.Resources>
        <CornerRadius x:Key="TabHeaderCornerRadius">2,2,0,0</CornerRadius>
        <Visibility x:Key="CloseButtonHoverVisibility">Collapsed</Visibility>
        <Visibility x:Key="CloseButtonSelectedVisibility">Collapsed</Visibility>
        <Visibility x:Key="CloseButtonNormalVisibility">Collapsed</Visibility>

        <system:Double x:Key="TabHeaderSize">24</system:Double>

        <SolidColorBrush x:Key="ActiveSelected" Color="White"/>
      </Style.Resources>

      <Setter Property="a:OverflowTabHeaderObserver.EnableTracking" Value="True" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="TabItem">

            <Border Name="OutterBorder"
                  Height="{DynamicResource TabHeaderSize}"
                  BorderThickness="1"
                  BorderBrush="Transparent"
                  Background="Transparent"
                  CornerRadius="{DynamicResource TabHeaderCornerRadius}"
                  Margin="{TemplateBinding Margin}" MinWidth="20">

              <Grid x:Name="InnerGrid" UseLayoutRounding="True" VerticalAlignment="Center" HorizontalAlignment="Stretch" RenderTransformOrigin="0.5,0.5">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition />
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Image x:Name="TabIcon"
                     Width="20"
                     Height="20"
                     Stretch="None"
                     Source="{Binding Path=(a:ControlEx.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                     VerticalAlignment="Center"
                     HorizontalAlignment="Center"
                     Margin="4,0,0,0" />

                <ContentPresenter x:Name="HeaderPresenter" 
                                Grid.Column="1" 
                                TextBlock.Foreground="White" 
                                Content="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}}" 
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left"
                                Margin="2">
                  <ContentPresenter.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionStyle}" />
                  </ContentPresenter.Resources>
                </ContentPresenter>

                <!-- Close Button -->
                <Button Grid.Column="2" 
                          x:Name="CloseButton" 
                          Command="{x:Static a:MainWindow.CloseDocument}"
                          CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, BindsDirectlyToSource=True}"
                          Visibility="{DynamicResource CloseButtonNormalVisibility}" 
                          Margin="2,0,2,0">
                  <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource CloseButtonStyle}" />
                  </Button.Style>
                  <Path Stroke="{Binding Path=Foreground, ElementName=CloseButton}"
                      StrokeThickness="1.5" Data="{StaticResource CloseIconGeometry}" />
                </Button>

              </Grid>
            </Border>

            <ControlTemplate.Triggers>

              <DataTrigger Binding="{Binding Path=(xmp:FlexStackPanel.IsOverflowed), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Visibility" Value="Hidden" />
              </DataTrigger>

              <DataTrigger Binding="{Binding Path=(a:ControlEx.Icon), RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                <Setter TargetName="TabIcon"  Property="Visibility" Value="Collapsed" />
              </DataTrigger>

              <Trigger Property="IsSelected"  Value="True">
                <Setter Property="Foreground" TargetName="CloseButton" Value="#70000000" />
                <Setter Property="Visibility" TargetName="CloseButton" Value="{DynamicResource CloseButtonSelectedVisibility}" />
              </Trigger>

              <Trigger Property="IsMouseOver" SourceName="OutterBorder" Value="True">
                <Setter Property="Visibility" TargetName="CloseButton" Value="{DynamicResource CloseButtonHoverVisibility}" />
              </Trigger>

              <Trigger Property="IsMouseOver" SourceName="CloseButton" Value="True">
                <Setter Property="Foreground" TargetName="CloseButton" Value="Black" />
              </Trigger>

              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding Path=IsMouseOver, ElementName=OutterBorder}" Value="True" />
                  <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" TargetName="OutterBorder" Value="#A0fffcf2" />
                <Setter Property="Background" TargetName="OutterBorder" Value="#40ffe8a6" />
              </MultiDataTrigger>

              <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource ActiveSelected}" TargetName="OutterBorder" />
                <Setter Property="BorderBrush" Value="{DynamicResource ActiveSelected}" TargetName="OutterBorder" />
                <Setter Property="TextBlock.Foreground" Value="Black" TargetName="HeaderPresenter" />
              </DataTrigger>

              <DataTrigger Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Left">
                <Setter Property="RenderTransform" TargetName="InnerGrid">
                  <Setter.Value>
                    <RotateTransform Angle="180" />
                  </Setter.Value>
                </Setter>
              </DataTrigger>

              <DataTrigger Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Bottom">
                <Setter Property="RenderTransform" TargetName="InnerGrid">
                  <Setter.Value>
                    <RotateTransform Angle="180" />
                  </Setter.Value>
                </Setter>
              </DataTrigger>

            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>

      <Style.Triggers>
        <DataTrigger Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Left">
          <Setter Property="LayoutTransform">
            <Setter.Value>
              <RotateTransform Angle="-90" />
            </Setter.Value>
          </Setter>

        </DataTrigger>
        <DataTrigger Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Right">
          <Setter Property="LayoutTransform">
            <Setter.Value>
              <RotateTransform Angle="90" />
            </Setter.Value>
          </Setter>
        </DataTrigger>

        <DataTrigger Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Bottom">
          <Setter Property="LayoutTransform">
            <Setter.Value>
              <RotateTransform Angle="180" />
            </Setter.Value>
          </Setter>
        </DataTrigger>

      </Style.Triggers>
    </Style>

    <!-- Document TabItem style -->
    <Style x:Key="DocumentTabItem" TargetType="TabItem" BasedOn="{StaticResource TabItemBase}">
      <Style.Resources>
        <Visibility x:Key="CloseButtonHoverVisibility">Visible</Visibility>
        <Visibility x:Key="CloseButtonSelectedVisibility">Visible</Visibility>
        <Visibility x:Key="CloseButtonNormalVisibility">Hidden</Visibility>
        <xamlExtensions:ResourceKey x:Key="ActiveSelected" Value="{StaticResource GoldGlassBrush}" />
      </Style.Resources>
    </Style>

    <!-- Overflow button style -->
    <Style x:Key="ToggleMenuButton" TargetType="ToggleButton">
      <Setter Property="Foreground" Value="LightGray" />
      <Setter Property="Width" Value="16" />
      <Setter Property="Height" Value="16" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="ToggleButton">
            <Border Background="Transparent"
                  Name="ButtonBorder"
                  BorderThickness="1"
                  BorderBrush="Transparent">
              <ContentPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Background" TargetName="ButtonBorder" Value="LightCyan" />
                <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Gold" />
              </Trigger>
              <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Background" TargetName="ButtonBorder" Value="LightCyan" />
                <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="Gold" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

    <!-- TabControl Style -->
    <Style TargetType="TabControl">
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="TabControl">
            <Grid Background="#FF334667">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>

              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>

              <xmp:FlexStackPanel x:Name="TabHeaderPanel" Orientation="Horizontal" IsItemsHost="True"/>

              <Border Grid.Row="1" Grid.ColumnSpan="2" Background="White">
                <ContentPresenter  ContentSource="SelectedContent" />
              </Border>

              <ToggleButton Grid.Column="1"
                      xme:FrameworkElementExtension.ContextMenuPlacementTarget="{Binding RelativeSource={RelativeSource Self}}"
                      ContextMenuService.IsEnabled="False"
                      IsChecked="{Binding Path=ContextMenu.IsOpen, 
                                  RelativeSource={RelativeSource Self}, Mode=TwoWay}"
                      x:Name="PART_MenuButton" 
                      Style="{StaticResource ToggleMenuButton}" 
                      Visibility="Collapsed">
                <Path x:Name="MenuIcon" 
                      Stroke="{Binding Path=Foreground, ElementName=PART_MenuButton}"
                      VerticalAlignment="Center" HorizontalAlignment="Center"
                      StrokeThickness="0"
                      Fill="{Binding Path=Foreground, ElementName=PART_MenuButton}"
                      Data="{StaticResource OverflowMenuIconGeometry}" />
                <ToggleButton.Resources>
                  <CollectionViewSource x:Key="ViewSource" 
                                        Source="{Binding Path=ItemsSource, 
                                                 RelativeSource={RelativeSource TemplatedParent}}">
                    <CollectionViewSource.SortDescriptions>
                      <scm:SortDescription/>
                    </CollectionViewSource.SortDescriptions>
                  </CollectionViewSource>
                </ToggleButton.Resources>
                <ToggleButton.ContextMenu>
                  <ContextMenu Placement="Bottom"   
                               ItemsSource="{Binding Source={StaticResource ViewSource}}" 
                               Style="{StaticResource ContextMenuBase}">
                    <ContextMenu.ItemContainerStyle>
                      <Style TargetType="MenuItem" BasedOn="{StaticResource MenuItemBase}">
                        <Setter Property="Header" Value="{Binding}" />
                        <Setter Property="Command" Value="{x:Static a:MainWindow.ActivateDocument}" />
                        <Setter Property="CommandParameter" 
                                Value="{Binding Path=Header, RelativeSource={RelativeSource Self}}" />
                      </Style>
                    </ContextMenu.ItemContainerStyle>
                  </ContextMenu>
                </ToggleButton.ContextMenu>
              </ToggleButton>
            </Grid>

            <ControlTemplate.Triggers>
              <Trigger Property="TabStripPlacement" Value="Bottom">
                <Setter Property="Grid.Row" Value="2" TargetName="TabHeaderPanel"/>
              </Trigger>

              <DataTrigger Binding="{Binding Path=HasOverflowedChildren, ElementName=TabHeaderPanel}" 
                           Value="false">
                <Setter Property="Data" TargetName="MenuIcon"  Value="{StaticResource MenuIconGeometry}"/>
              </DataTrigger>

              <Trigger Property="StretchDirection" SourceName="TabHeaderPanel" Value="None">
                <Setter TargetName="PART_MenuButton" Property="Visibility" Value="Visible" />
              </Trigger>
              <Trigger Property="StretchDirection" SourceName="TabHeaderPanel" Value="UpOnly">
                <Setter TargetName="PART_MenuButton" Property="Visibility" Value="Visible" />
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>

  </Application.Resources>
</Application>
